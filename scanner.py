import os
import re
import hashlib
import concurrent.futures

BUFFER_SIZE = 65536

def load_virus_rules(virus_rule_file):
    with open(virus_rule_file, 'r') as f:
        return [re.compile(line.strip().encode()) for line in f if line.strip()]

def scan_file(filename, virus_rules):
    try:
        with open(filename, 'rb') as f:
            hash_obj = hashlib.sha256()
            while True:
                buf = f.read(BUFFER_SIZE)
                if not buf:
                    break
                hash_obj.update(buf)
                file_content = buf
                for rule in virus_rules:
                    if rule.search(file_content):
                        return filename, True
            return filename, False
    except FileNotFoundError:
        return filename, False

def scan_directory(directory, virus_rules, max_workers=None):
    infected_files = []
    selected_exts = ['.py', '.exe', '.dll', '.bat']
    files_to_scan = [file.path for file in os.scandir(directory) if file.is_file() and os.path.splitext(file.name)[1].lower() in selected_exts]
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        results = [executor.submit(scan_file, file, virus_rules) for file in files_to_scan]
        for result in concurrent.futures.as_completed(results):
            if result.result()[1]:
                infected_files.append(result.result()[0])
    return infected_files
